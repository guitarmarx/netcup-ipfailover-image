#Libraries
import smtplib
from email.MIMEMultipart import MIMEMultipart
from email.MIMEText import MIMEText
import logging
import subprocess
import os
import pandas
import requests
import re
import time

#Parameter
#SMTP
smtp_server= "$SMTP_SERVER"
smtp_port= $SMTP_PORT
smtp_user= "$SMTP_USER"
smtp_pass= "$SMTP_PASS"
smtp_source_mail= "$SMTP_SOURCE_MAIL"
smtp_target_mail= "$SMTP_TARGET_MAIL"


#Webservice
netcup_user = "$NETCUP_USER"
netcup_pass = "$NETCUP_PASS"
url= "$URL"
server_file = "/srv/servers.conf"
failoverIP = "$FAILOVER_IP"
failoverIPNetmask = "$FAILOVER_NETMASK"
FAILOVER_ERROR_OCCURED = 'false'
TIME_BETWEEN_PINGS=$TIME_BETWEEN_PINGS

#Logging
log_file='/srv/failover.log'
log_format='%(asctime)s - %(levelname)s - %(message)s'

#Messages
body_deleting_failed = "An Error occured during server failover. Deleting IP routing failed wiht the following return message: "
body_setting_failed = "An Error occured during server failover. Setting up new IP routing failed with the following return message: "
body_setting_successful = "FAILOVER SUCCESSFUL \n \n A docker swarm leader failure occured and the ip routing changed successfully. New leader for the swarm is "


#reading available leaders
servers = pandas.read_csv(server_file, sep=";", names=["id", "name", "mac", "ip"])


#-------------FUNKTIONS------------------------------

def isPingable(ip):
    command="ping -c 1 -W 4 " + ip + " > /dev/null 2>&1"
    response = os.system(command)
	
    if response == 0:
	return True
    else:
	return False

def getServerInfo(server_name):
	return servers[servers["name"] == server_name]



def initLogging():
	logger.setLevel(logging.INFO)
	formatter = logging.Formatter(log_format)

	#Init file logging
	handler = logging.FileHandler(log_file)
	handler.setFormatter(formatter)
	logger.addHandler(handler)

	#Init console logging
	handler2 = logging.StreamHandler()
	handler2.setFormatter(formatter)
	logger.addHandler(handler2)

def sendNotification(body, returnmessage):

	try:
		#Message definition
		msg = MIMEMultipart()
		msg['Subject'] = 'Backend Info'
		msg['From'] = smtp_source_mail
		msg['To'] = smtp_target_mail
		body = body + returnmessage
		msg.attach(MIMEText(body, 'plain'))

		#Open Connection
		server = smtplib.SMTP(smtp_server, smtp_port)
		server.starttls()
		server.login(smtp_user, smtp_pass)

		#Send Mail
		server.sendmail(smtp_source_mail, [smtp_target_mail], msg.as_string())
		server.quit()
		logger.info('Mail notifiaction sent')
	except Exception as e:
		logger.error(str(e))

	
	return

def hasServerFailoverIP( server):
        #Template
        template_message ="""<?xml version="1.0" encoding="UTF-8"?>
                        <SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns1="http://enduser.service.web.vcp.netcup.de/">
                                <SOAP-ENV:Body>
                                        <ns1:getVServerIPs>
                                                <loginName>%s</loginName>
                                                <password>%s</password>
                                                        <vserverName>%s</vserverName>
                                                </ns1:getVServerIPs>
                                </SOAP-ENV:Body>
                        </SOAP-ENV:Envelope>"""
        #Create Message
        message=template_message%(netcup_user, netcup_pass,  server)

        #Definition Header
        headers = {"Content-Type":  "text/xml ; charet=UTF-8","Content-Length": str(len(message)),"SOAPAction": ""  }

        #Send SOAP Post

        response = requests.post(url,data=message,headers=headers)
        if failoverIP in response.text:
                return True
        else:
                return False



def changeIPRouting(netcup_user, netcup_pass, server, ip, netmask, mac):
	#Template
	template_message ="""<?xml version="1.0" encoding="UTF-8"?>
			<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns1="http://enduser.service.web.vcp.netcup.de/">
				<SOAP-ENV:Body>
					<ns1:changeIPRouting>
						<loginName>%s</loginName>
						<password>%s</password>
							<routedIP>%s</routedIP>
							<routedMask>%s</routedMask>
							<destinationVserverName>%s</destinationVserverName>
							<destinationInterfaceMAC>%s</destinationInterfaceMAC>
						</ns1:changeIPRouting>
				</SOAP-ENV:Body>
			</SOAP-ENV:Envelope>"""
	#Create Message
	message=template_message%(netcup_user, netcup_pass, ip, netmask, server, mac)

	#Definition Header
	headers = {"Content-Type":  "text/xml ; charet=UTF-8","Content-Length": str(len(message)),"SOAPAction": ""  }
	
	#Send SOAP Post
	response = requests.post(url,data=message,headers=headers)
	if response.status_code == 200:
		logger.info("SOAP: changeIPRouting Returncode 200.")
		status = re.search(r'<return>(.*?)<\/return>', response.content)
		if status:
			return status.group(1) #true
		else:
			return response.content
	else:
		return response.content


def getCurrentIPFailoverServer():
        #reading available leaders
        servers = pandas.read_csv(server_file, sep=";", names=["id", "name", "mac", "ip"])
        for element in servers["name"]:
                #check if server has failover ip
                if hasServerFailoverIP(element):
                        return servers[servers["name"] == element]
        return False

def getFirstPingableServer():
        servers = pandas.read_csv(server_file, sep=";", names=["id", "name", "mac", "ip"])
        for element in servers["ip"]:
                #check if server is pingable
                if isPingable(element):
                        return  servers[servers["ip"] == element]
        return False



#----------------MAIN----------------------------

#Init Logger
logger = logging.getLogger()
initLogging()
logger.info("script started ...")

FIRST_PING_FAILED=False


while True:
	time.sleep(TIME_BETWEEN_PINGS)
	
	#check ping
	if isPingable(failoverIP):
		FIRST_PING_FAILED=False
		continue
	#ping = False
	if FIRST_PING_FAILED==False:
		logger.warn('First attempt: Ping lost to ' + failoverIP +'. Setting FIRST_PING_FAILED Flag.')
		FIRST_PING_FAILED=True
		continue
		
	#ping = False && FIRST_PING_FAILED = True
	logger.error('Second attempt: Ping lost to ' + failoverIP)
	logger.info('Starting failover...')


	#####Start Failover
	#get server with failoverIP
	failoverIPServer = getCurrentIPFailoverServer()	
	logger.info('Current failover server: ' + failoverIPServer['id'].iloc[0])

	#delete IP Routing
	return_del = changeIPRouting(netcup_user, netcup_pass, failoverIPServer['name'].iloc[0], failoverIP, failoverIPNetmask, '00:00:00:00:00:00')
				
	if return_del == 'true':
		#delete IP routing successful
		logger.info('Deleting IP routing for ' + failoverIP + ' successful, setting new IP routing')
		
		#get first pingable server
		pingableServer = getFirstPingableServer()
		logger.info('Switching to: ' + pingableServer['id'].iloc[0])
		
		#request change IP routing for current leader
		return_set = changeIPRouting(netcup_user, netcup_pass, pingableServer['name'].iloc[0], failoverIP, failoverIPNetmask, pingableServer['mac'].iloc[0])

		if return_set == 'true':
			#set IP routing successful
			sendNotification(body_setting_successful, pingableServer['id'].iloc[0])
			logger.info('setting up new IP routing for ' + failoverIP + ' was successful')
			FIRST_PING_FAILED=False
		else:
			#set IP routing failed
			if not FAILOVER_ERROR_OCCURED == 'true':
				#set new IP routing failed at first try
				logger.error('setting new IP routing for ' + failoverIP + ' failed at first try, notification mail is sent')
				sendNotification(body_setting_failed, return_set)
				FAILOVER_ERROR_OCCURED = 'true'
			else:
				#set new IP routing failed again
				logger.error('another attempt for setting up new IP routing ' + failoverIP + ' failed')
	else:
		#delete IP routing failed
		if not FAILOVER_ERROR_OCCURED == 'true':
			#delete IP routing failed at first try
			FAILOVER_ERROR_OCCURED = 'true'
			logger.error('setting new IP routing for ' + failoverIP + ' failed at first try, notification mail is sent')
			sendNotification(body_deleting_failed, return_del)
		else:
			#delete IP routing failed again
			logger.error('another attemmpt for deleting IP routing for ' + failoverIP + ' failed')
	
